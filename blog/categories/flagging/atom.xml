<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flagging | Adam Ginsburg's Astro Blog]]></title>
  <link href="http://keflavich.github.com/blog/categories/flagging/atom.xml" rel="self"/>
  <link href="http://keflavich.github.com/"/>
  <updated>2012-12-28T17:29:05-07:00</updated>
  <id>http://keflavich.github.com/</id>
  <author>
    <name><![CDATA[Adam Ginsburg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A workaround for individual maps?]]></title>
    <link href="http://keflavich.github.com/blog/2011/03/23/workaround-for-individual-maps/"/>
    <updated>2011-03-23T18:33:00-06:00</updated>
    <id>http://keflavich.github.com/blog/2011/03/23/workaround-for-individual-maps</id>
    <content type="html"><![CDATA[<div class='post'>
I closely examined the timestreams of 101208_ob7 as I said I would yesterday.  Unfortunately, all I can do is describe the symptoms: the first deconvolution model looks good, though it isn't quite as wide as the true source (this should be OK; it is an iterative method, after all).  In the second iteration, though, the deconvolution model is even smaller and lower amplitude... and it goes on like that. <br /><br><div class="separator" style="clear: both; text-align: center;"><nobr><img width=390 src="http://dl.dropbox.com/u/11308804/101208_ob7_uranus_indivtest_noaddmodeltimestream008_plots_00_bolo03.png" align=left><br /><img width=390 src="http://dl.dropbox.com/u/11308804/101208_ob7_uranus_indivtest_noaddmodeltimestream008_plots_01_bolo03.png" align=right></nobr></div><br><br /><br /><div align=left class="separator" style="clear: both; text-align: left;"><p><br>Not deconvolving results in a healthy-looking clean map - pretty much what you expect and want to see.<br /></div><br />This implies that somehow removing an incomplete deconvolved model leads to more of the source being included in the 'atmosphere' than would have been included with no model subtraction at all.  I'm not sure how this is possible.  In fact... I'm really quite sure that it is not.  <br /><br />The workaround is to only add positive changes to the model.  This should 'definitely work' but may be non-convergent and assumes that the model never has anything wrong with it at any iteration.  I have demonstrated that this works nicely for the two Uranus observations I tested on, but now I have to run the gamut of tests.... the first (very obvious) problem is that the background is now positive, which is dead wrong.  This workaround is not viable.<br /><br />Alright, so what next?  I've described the symptoms and that I think they can't occur...<br />A closer look shows that new_astro is not being incorporated into astro_model at the second iteration.  Why?<br /><br /><br />AHA!  Pyflagger + find_all_points reveals the problem!<br /><pre>Map value: 16.939728   Weighted average: 17.476323   Unweighted Average: 524.573136<br />scan,bolo,time:       mapped       astro       flags      weight       scale<br />   3,  22,  12:     8.380408   13.561113    0.000000    0.025132    1.000000<br />   4, 124,  23:   822.005327   13.561113    0.000000    0.000038    1.118012<br />   4,  21,  38:   719.408983   13.561113    0.000000    0.000037    0.946721<br />   5,  20,   7:     4.470616   13.561113    0.000000    0.013303    1.400000<br />   5, 119,  23:   882.508303   13.561113    0.000000    0.000033    0.926887<br />   5, 100,  35:   327.007750   13.561113    0.000000    0.000074    1.184397<br />   5, 106,  38:   162.562098   13.561113    0.000000    0.000704    0.970000<br />   6, 116,  27:   779.075640   13.561113    0.000000    0.000033    0.891768<br />   8, 112,   3:   235.557390   13.561113    0.000000    0.000147    0.947130<br />   9,   3,  14:   966.721773   13.561113    0.000000    0.000032    1.166292<br />   9, 109,  41:   139.753656   13.561113    0.000000    0.000753    1.075269<br />  10, 104,   8:   641.121935   13.561113    0.000000    0.000050    0.927827<br />  10, 105,  24:     4.323228   13.561113    0.000000    0.032759    0.019022<br />  10,  32,  36:   847.646990   13.561113    0.000000    0.000034    1.099406<br />  11,  36,   9:   834.757586   13.561113    0.000000    0.000038    1.184751<br />  11,  76,  37:   566.851891   13.561113    0.000000    0.000040    1.111000<br />  12,  77,  13:   834.603090   13.561113    0.000000    0.000034    1.128464<br />  12,  44,  44:   335.465654   13.561113    0.000000    0.000195    2.165775<br />  13,  26,  17:    50.423143   13.561113    0.000000    0.004826    0.829932<br />  13,  75,  29:   724.884676   13.561113    0.000000    0.000042    0.923077<br />  14,  49,  21:   797.618990   13.561113    0.000000    0.000038    1.091918<br />  14,  29,  33:   743.856012   13.561113    0.000000    0.000035    1.050360<br />  15,  33,  13:   660.670099   13.561113    0.000000    0.000031    0.832180<br />  15,  53,  25:   604.174286   13.561113    0.000000    0.000047    0.889922<br />  15,  88,  40:     4.626476   13.561113    0.000000    0.008241    0.191489<br />  17,  64,  20:   778.950533   13.561113    0.000000    0.000037    1.233108<br />  18,  68,  30:   686.048136   13.561113    0.000000    0.000040    1.387283<br /></pre><br />Note that the lowest points have the highest weights.  They DEFINITELY shouldn't.  What's wrong with them?<br /><br />Apparently they have NO sensitivity to the sky!  What?!  There were a bunch of bad bolos in Dec2010 that weren't flagged out... I wonder if that problem persists to other epochs.  Still, why does it only affect pointing observations?  Looking at the power spectra... the large-timescale stuff becomes less dominant when scans are longer, but the noisy spectra are still clearly noise-only.  How odd.<br /><br />Dropped to 112 good bolos from 134.  That is much more believable.  Have to go back and fix Dec09 data too...<br /><br />Even after fixing the bad bolos, the model drops with iteration number.  Why why why?<br /><br />Well, looking at deconv_map, I've always returned the truly deconvolved version, not the reconvolved... maybe the reconvolved really is better?  Again, this will have to be extensively tested, but it certainly gets rid of the obvious/dominant error that the model kept dropping off.  However, FINALLY, based on how ridiculously good the reconv-deconvolved map looks, I think I'm ready to do the extensive pipeline tests.  So, 10dec_caltest has been started up with all of the new bolo_params applied and the changes in place to deconv_map... let's see what happens.<br /><img src="http://dl.dropbox.com/u/11308804/compare_noadd_nodeconv.png" width=800 title="Comparison of deconvolved and not-deconvolved maps (with reconv)"><br /><br />After that runs, I'll have to re-run the fit_and_plot routines</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flagger images]]></title>
    <link href="http://keflavich.github.com/blog/2009/01/17/flagger-images/"/>
    <updated>2009-01-17T07:26:00-07:00</updated>
    <id>http://keflavich.github.com/blog/2009/01/17/flagger-images</id>
    <content type="html"><![CDATA[<div class='post'>
James requested sample images from the flagger for the methods paper.  Below are images + description:<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_lsgW26mWZnU/SXHsZcqegtI/AAAAAAAAEs4/3PjUtU2IXtQ/s1600-h/sample_waterfall_070911_o15_highFnoisepng.png"><img style="cursor: pointer; width: 400px; height: 388px;" src="http://3.bp.blogspot.com/_lsgW26mWZnU/SXHsZcqegtI/AAAAAAAAEs4/3PjUtU2IXtQ/s400/sample_waterfall_070911_o15_highFnoisepng.png" alt="" id="BLOGGER_PHOTO_ID_5292270959072281298" border="0" /></a><br />This is a "noise-dominated" scan in the sense that the high/low pixels are set by noise, not signal.  Despite the clear high frequency noise, this image actually maps out pretty well - I think the high-noise bolometers get downweighted and the high/low pixels probably get clipped by my hot pixel rejection procedure.<br /><br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_lsgW26mWZnU/SXHsY7Rgq3I/AAAAAAAAEsY/0NT8IB26JUo/s1600-h/flagger_marked_source_050708_o15.png"><img style="cursor: pointer; width: 400px; height: 351px;" src="http://3.bp.blogspot.com/_lsgW26mWZnU/SXHsY7Rgq3I/AAAAAAAAEsY/0NT8IB26JUo/s400/flagger_marked_source_050708_o15.png" alt="" id="BLOGGER_PHOTO_ID_5292270950109195122" border="0" /></a><br />An image of the galactic center with a source southeast of center identified.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_lsgW26mWZnU/SXHsYyHCEGI/AAAAAAAAEsg/3iwoklY0--0/s1600-h/sample_waterfall_050708_o15_glitchandsources.png"><img style="cursor: pointer; width: 392px; height: 400px;" src="http://1.bp.blogspot.com/_lsgW26mWZnU/SXHsYyHCEGI/AAAAAAAAEsg/3iwoklY0--0/s400/sample_waterfall_050708_o15_glitchandsources.png" alt="" id="BLOGGER_PHOTO_ID_5292270947649327202" border="0" /></a><br />A scan from the GC image above.  I forgot to mark the source, I should go back and do that.  The glitch is obvious.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_lsgW26mWZnU/SXHsZHVZ4OI/AAAAAAAAEso/pOXwGFn7rGg/s1600-h/sample_waterfall_050708_o15_glitchflagged.png"><img style="cursor: pointer; width: 392px; height: 400px;" src="http://1.bp.blogspot.com/_lsgW26mWZnU/SXHsZHVZ4OI/AAAAAAAAEso/pOXwGFn7rGg/s400/sample_waterfall_050708_o15_glitchflagged.png" alt="" id="BLOGGER_PHOTO_ID_5292270953346752738" border="0" /></a><br />I drew a box to flag out the region affected by the glitch.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_lsgW26mWZnU/SXHsZG_MmWI/AAAAAAAAEsw/RA6tqAWMnLM/s1600-h/sample_waterfall_050708_o15_glitchgone.png"><img style="cursor: pointer; width: 392px; height: 400px;" src="http://4.bp.blogspot.com/_lsgW26mWZnU/SXHsZG_MmWI/AAAAAAAAEsw/RA6tqAWMnLM/s400/sample_waterfall_050708_o15_glitchgone.png" alt="" id="BLOGGER_PHOTO_ID_5292270953253607778" border="0" /></a><br />This is what happens when I redraw after flagging out the glitch - the colorbar is rescaled and no more glitch.<br /><br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_lsgW26mWZnU/SXIDILh3hfI/AAAAAAAAEtQ/cMuOhlFO_fA/s1600-h/sample_waterfall_050708_o15_glitchandsources_marked.png"><img style="cursor: pointer; width: 400px; height: 228px;" src="http://4.bp.blogspot.com/_lsgW26mWZnU/SXIDILh3hfI/AAAAAAAAEtQ/cMuOhlFO_fA/s400/sample_waterfall_050708_o15_glitchandsources_marked.png" alt="" id="BLOGGER_PHOTO_ID_5292295951182431730" border="0" /></a><br /><br />Timestream with glitches and sources marked (one pixel in the map is hit by 3 different points in this scan).<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_lsgW26mWZnU/SXIDH3uIjHI/AAAAAAAAEtI/vijTeEWf_nA/s1600-h/sample_waterfall_050708_o15_glitchandsources_gray.png"><img style="cursor: pointer; width: 400px; height: 228px;" src="http://4.bp.blogspot.com/_lsgW26mWZnU/SXIDH3uIjHI/AAAAAAAAEtI/vijTeEWf_nA/s400/sample_waterfall_050708_o15_glitchandsources_gray.png" alt="" id="BLOGGER_PHOTO_ID_5292295945865170034" border="0" /></a><br />Grayscale version of above (ok, I lied about grayscale being impossible) with a different pixel marked.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_lsgW26mWZnU/SXIDHbYLbiI/AAAAAAAAEtA/nSh2rM6GhMc/s1600-h/flagger_marked_source_footprint_050708_o15.png"><img style="cursor: pointer; width: 400px; height: 301px;" src="http://1.bp.blogspot.com/_lsgW26mWZnU/SXIDHbYLbiI/AAAAAAAAEtA/nSh2rM6GhMc/s400/flagger_marked_source_footprint_050708_o15.png" alt="" id="BLOGGER_PHOTO_ID_5292295938256891426" border="0" /></a><br />A zoom-in around the 'kidney bean' source with the Bolocam footprint overlaid and a pixel marked.  Note that this pixel corresponds to the 3 points in the color waterfall above.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flagger]]></title>
    <link href="http://keflavich.github.com/blog/2008/11/21/flagger/"/>
    <updated>2008-11-21T18:35:00-07:00</updated>
    <id>http://keflavich.github.com/blog/2008/11/21/flagger</id>
    <content type="html"><![CDATA[<div class='post'>
Discovered that the flagger causes some pretty serious problems if you try to run it on a non-coadd for obvious reasons: there's practically no coverage!  Individual maps should NOT go through the flagger, so I have added a piece of code that turns off the flagger if only one observation is being used.  That code is in map_iter where the flagger is called.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAD flagger]]></title>
    <link href="http://keflavich.github.com/blog/2008/11/18/mad-flagger/"/>
    <updated>2008-11-18T09:20:00-07:00</updated>
    <id>http://keflavich.github.com/blog/2008/11/18/mad-flagger</id>
    <content type="html"><![CDATA[<div class='post'>
<pre><br />; The Mad Flagger<br />; Flag based on the median average deviation within a spatial pixel<br />function mad_flagger,data,inds,flags,nsig=nsig<br /><br />    t = systime(/sec)<br />    f0 = total(where(flags))<br /><br />    if n_e(nsig) eq 0 then nsig = 3    <br />    <br />    newflags = flags<br /><br />    mx=max(inds)<br />    vec3=fltarr(mx+1)<br />    h=histogram(inds,reverse_indices=ri,OMIN=om)<br />    for j=0L,n_elements(h)-1 do begin<br />        if ri[j+1] gt ri[j] then begin<br />            v_inds = [ri[ri[j]:ri[j+1]-1]]<br />            if n_e(v_inds) gt 2 then begin<br />                vec = data[v_inds]<br />;                vecmad = mad(vec)  ; the MAD is WAY too small!  I ended up rejecting 8% of points!<br />                vecmad = stddev(vec)<br />                vecmed = median(vec,/even)<br />                madreject = where( (vec gt vecmed + nsig*vecmad) or (vec lt vecmed - nsig*vecmad) )<br />                if (n_e(madreject) gt 0 and total(madreject)) gt 0 then begin<br />                    reject_inds = v_inds[madreject]<br />                    newflags[reject_inds] = 1<br />                endif <br />            endif<br />        endif<br />    endfor<br />    print,"MAD flagger took ",strc(systime(/sec)-t)," seconds and flagged ",$<br />        strc(round(total(where(newflags)) - f0)),' points'<br /><br />    return,newflags<br /><br />end<br /></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flagging]]></title>
    <link href="http://keflavich.github.com/blog/2008/10/07/flagging/"/>
    <updated>2008-10-07T22:31:00-06:00</updated>
    <id>http://keflavich.github.com/blog/2008/10/07/flagging</id>
    <content type="html"><![CDATA[<div class='post'>
most of what's left now is flagging.  I updated the flagger, flag_manual.pro.  Check it out for documentation</div>

]]></content>
  </entry>
  
</feed>
