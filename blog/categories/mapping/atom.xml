<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mapping | Adam Ginsburg's Astro Blog]]></title>
  <link href="http://keflavich.github.com/blog/categories/mapping/atom.xml" rel="self"/>
  <link href="http://keflavich.github.com/"/>
  <updated>2012-12-28T17:29:05-07:00</updated>
  <id>http://keflavich.github.com/</id>
  <author>
    <name><![CDATA[Adam Ginsburg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting rid of haloes]]></title>
    <link href="http://keflavich.github.com/blog/2012/03/30/getting-rid-of-haloes/"/>
    <updated>2012-03-30T18:28:00-06:00</updated>
    <id>http://keflavich.github.com/blog/2012/03/30/getting-rid-of-haloes</id>
    <content type="html"><![CDATA[<div class='post'>
Haloes are when images look like this: <div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Hwwiewo9FyU/T3Yhs6TpYcI/AAAAAAAAG0k/uKSTBCn95FY/s1600/Screen%2Bshot%2B2012-03-30%2Bat%2B3.09.54%2BPM.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="132" width="111" src="http://1.bp.blogspot.com/-Hwwiewo9FyU/T3Yhs6TpYcI/AAAAAAAAG0k/uKSTBCn95FY/s320/Screen%2Bshot%2B2012-03-30%2Bat%2B3.09.54%2BPM.png" /></a></div><br />instead of this, as they should:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-t5jVccq9Dtc/T3Yhs-hcY5I/AAAAAAAAG0s/EZ4x0zdSgxw/s1600/Screen%2Bshot%2B2012-03-30%2Bat%2B3.09.58%2BPM.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="141" width="121" src="http://4.bp.blogspot.com/-t5jVccq9Dtc/T3Yhs-hcY5I/AAAAAAAAG0s/EZ4x0zdSgxw/s320/Screen%2Bshot%2B2012-03-30%2Bat%2B3.09.58%2BPM.png" /></a></div><br />Things to try:<br /><ol><li> Pass <code>/return_deconv</code> to deconv_map<br /><li> Pass <code>/linear</code> to deconv_map<br /><li> Disable deconvolve - deconvolve=0<br /></ol>In l123 & l169, at least, <code>/return_deconv</code> worked</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deconvolution vs. Not]]></title>
    <link href="http://keflavich.github.com/blog/2011/04/07/deconvolution-vs-not/"/>
    <updated>2011-04-07T12:36:00-06:00</updated>
    <id>http://keflavich.github.com/blog/2011/04/07/deconvolution-vs-not</id>
    <content type="html"><![CDATA[<div class='post'>
In the W5 maps, everywhere except AFGL 4029 agrees to within about 20% (better than our supposed offset) independent of deconvolution scheme / modeling scheme, but AFGL 4029 disagrees by a factor of 2-3, indicating a severe dependence on map size.<br /><br />Here's the AFGL 4029 comparison originally: <br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 8.1515<br />Sum: 194.028  Mean: 1.03758  Median: 0.78441  RMS: 0.760825  NPIX: 187<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 5.77585<br />Sum: 137.481  Mean: 0.735194  Median: 0.517222  RMS: 0.663245  NPIX: 187<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 14.4043<br />Sum: 342.863  Mean: 1.83349  Median: 1.62579  RMS: 0.820079  NPIX: 187<br /><br />Here it is after flagging out another bad bolo:<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 8.14533<br />Sum: 193.882  Mean: 1.0368  Median: 0.783409  RMS: 0.764047  NPIX: 187<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 10.1518<br />Sum: 241.642  Mean: 1.2922  Median: 1.06321  RMS: 0.777165  NPIX: 187<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 13.9344<br />Sum: 331.677  Mean: 1.77367  Median: 1.56277  RMS: 0.820139  NPIX: 187<br /><br />order is deconvtest, nodeconvtest, 'reconv'<br /><br />deconvtest has virtually no change.  nodeconvtest goes up by a LOT... must be something about the weighting.  reconv drops, which is good, but not enough...<br /><br />curiously, it is not clear that nodeconv converges:  [10, 15, 20 iters]<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 8.70939<br />Sum: 207.308  Mean: 1.34615  Median: 1.09348  RMS: 0.760452  NPIX: 154<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 9.14028<br />Sum: 217.564  Mean: 1.41275  Median: 1.17223  RMS: 0.759027  NPIX: 154<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 9.42483<br />Sum: 224.337  Mean: 1.45673  Median: 1.2172  RMS: 0.758978  NPIX: 154<br /><br />similarly, reconv does not converge:<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 11.5623<br />Sum: 275.214  Mean: 1.61891  Median: 1.36357  RMS: 0.809771  NPIX: 170<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 12.5848<br />Sum: 299.553  Mean: 1.76208  Median: 1.51426  RMS: 0.807963  NPIX: 170<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 13.3102<br />Sum: 316.82  Mean: 1.86365  Median: 1.62092  RMS: 0.804582  NPIX: 170<br /><br /><br />by contrast, deconv converges rapidly:<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 8.27004<br />Sum: 196.85  Mean: 0.937381  Median: 0.659373  RMS: 0.759002  NPIX: 210<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 8.39255<br />Sum: 199.766  Mean: 0.951267  Median: 0.683644  RMS: 0.758766  NPIX: 210<br />BMAJ: 0.00916667  BMIN: 0.00916667  PPBEAM: 23.8028   SUM/PPBEAM: 8.42881<br />Sum: 200.629  Mean: 0.955377  Median: 0.690816  RMS: 0.75878  NPIX: 210<br /><br />while I'm at it, gaussfits for nodeconv and reconv:<br />Guess: 427,1113  Fit peak: 2.90411  Background: 0.0102637  X,Y position: 426.514822,1113.354863  X,Y FWHM: 64.253564,72.615868   Angle: 0.000000<br />Guess: 427,1113  Fit peak: 3.03769  Background: 0.000596982  X,Y position: 426.080980,1113.634660  X,Y FWHM: 77.405551,104.292823   Angle: 329.589335<br />well, isn't that neat!  Better than 5% agreement on the peaks.  Curiously, the background is higher for nodeconv, which is false: it is directly evident that the background is higher in reconv.  So I think this is just a failed fit, unfortunately.  The true peak of the reconv AFGL 4029 is 3.9 Jy, so there's a huge residual<br /><br /><br />Found an error in the noisemap computations that was artificially driving up the noise around NAN pixels in undersampled maps; this probably led to major problems.  I fixed it by only "flagging out" pixels with >2 NAN neighbors, i.e. so sparsely sampled that they should be ignored, I hope....  this may have affected modeling in all maps.<br /><br />Realized the problems with noisemap: if the model exactly equals the weighted mean at a given pixel, the residual will be EXACTLY zero (to within numerical precision).  This leads to underestimates of the noise!  What we really want is an estimate of the standard deviation on the mean, which is easily computed!  Just do a normal weighted sum of the difference between the data and the model (data and the mean); this is also equivalent (conveniently) to a chi^2 statistic, I think... Whoa.  How did I not do this before?  LETS FIND OUT I'M SURE THERE ARE AWFUL CONSEQUENCES!<br /><br /><br />Just had another idea to throw in - what if we downweight the scan edges?  It won't matter for individual maps or maps of the same size if done uniformly, but it could help incorporate "pointing" maps into "real" maps more accurately.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A workaround for individual maps?]]></title>
    <link href="http://keflavich.github.com/blog/2011/03/23/workaround-for-individual-maps/"/>
    <updated>2011-03-23T18:33:00-06:00</updated>
    <id>http://keflavich.github.com/blog/2011/03/23/workaround-for-individual-maps</id>
    <content type="html"><![CDATA[<div class='post'>
I closely examined the timestreams of 101208_ob7 as I said I would yesterday.  Unfortunately, all I can do is describe the symptoms: the first deconvolution model looks good, though it isn't quite as wide as the true source (this should be OK; it is an iterative method, after all).  In the second iteration, though, the deconvolution model is even smaller and lower amplitude... and it goes on like that. <br /><br><div class="separator" style="clear: both; text-align: center;"><nobr><img width=390 src="http://dl.dropbox.com/u/11308804/101208_ob7_uranus_indivtest_noaddmodeltimestream008_plots_00_bolo03.png" align=left><br /><img width=390 src="http://dl.dropbox.com/u/11308804/101208_ob7_uranus_indivtest_noaddmodeltimestream008_plots_01_bolo03.png" align=right></nobr></div><br><br /><br /><div align=left class="separator" style="clear: both; text-align: left;"><p><br>Not deconvolving results in a healthy-looking clean map - pretty much what you expect and want to see.<br /></div><br />This implies that somehow removing an incomplete deconvolved model leads to more of the source being included in the 'atmosphere' than would have been included with no model subtraction at all.  I'm not sure how this is possible.  In fact... I'm really quite sure that it is not.  <br /><br />The workaround is to only add positive changes to the model.  This should 'definitely work' but may be non-convergent and assumes that the model never has anything wrong with it at any iteration.  I have demonstrated that this works nicely for the two Uranus observations I tested on, but now I have to run the gamut of tests.... the first (very obvious) problem is that the background is now positive, which is dead wrong.  This workaround is not viable.<br /><br />Alright, so what next?  I've described the symptoms and that I think they can't occur...<br />A closer look shows that new_astro is not being incorporated into astro_model at the second iteration.  Why?<br /><br /><br />AHA!  Pyflagger + find_all_points reveals the problem!<br /><pre>Map value: 16.939728   Weighted average: 17.476323   Unweighted Average: 524.573136<br />scan,bolo,time:       mapped       astro       flags      weight       scale<br />   3,  22,  12:     8.380408   13.561113    0.000000    0.025132    1.000000<br />   4, 124,  23:   822.005327   13.561113    0.000000    0.000038    1.118012<br />   4,  21,  38:   719.408983   13.561113    0.000000    0.000037    0.946721<br />   5,  20,   7:     4.470616   13.561113    0.000000    0.013303    1.400000<br />   5, 119,  23:   882.508303   13.561113    0.000000    0.000033    0.926887<br />   5, 100,  35:   327.007750   13.561113    0.000000    0.000074    1.184397<br />   5, 106,  38:   162.562098   13.561113    0.000000    0.000704    0.970000<br />   6, 116,  27:   779.075640   13.561113    0.000000    0.000033    0.891768<br />   8, 112,   3:   235.557390   13.561113    0.000000    0.000147    0.947130<br />   9,   3,  14:   966.721773   13.561113    0.000000    0.000032    1.166292<br />   9, 109,  41:   139.753656   13.561113    0.000000    0.000753    1.075269<br />  10, 104,   8:   641.121935   13.561113    0.000000    0.000050    0.927827<br />  10, 105,  24:     4.323228   13.561113    0.000000    0.032759    0.019022<br />  10,  32,  36:   847.646990   13.561113    0.000000    0.000034    1.099406<br />  11,  36,   9:   834.757586   13.561113    0.000000    0.000038    1.184751<br />  11,  76,  37:   566.851891   13.561113    0.000000    0.000040    1.111000<br />  12,  77,  13:   834.603090   13.561113    0.000000    0.000034    1.128464<br />  12,  44,  44:   335.465654   13.561113    0.000000    0.000195    2.165775<br />  13,  26,  17:    50.423143   13.561113    0.000000    0.004826    0.829932<br />  13,  75,  29:   724.884676   13.561113    0.000000    0.000042    0.923077<br />  14,  49,  21:   797.618990   13.561113    0.000000    0.000038    1.091918<br />  14,  29,  33:   743.856012   13.561113    0.000000    0.000035    1.050360<br />  15,  33,  13:   660.670099   13.561113    0.000000    0.000031    0.832180<br />  15,  53,  25:   604.174286   13.561113    0.000000    0.000047    0.889922<br />  15,  88,  40:     4.626476   13.561113    0.000000    0.008241    0.191489<br />  17,  64,  20:   778.950533   13.561113    0.000000    0.000037    1.233108<br />  18,  68,  30:   686.048136   13.561113    0.000000    0.000040    1.387283<br /></pre><br />Note that the lowest points have the highest weights.  They DEFINITELY shouldn't.  What's wrong with them?<br /><br />Apparently they have NO sensitivity to the sky!  What?!  There were a bunch of bad bolos in Dec2010 that weren't flagged out... I wonder if that problem persists to other epochs.  Still, why does it only affect pointing observations?  Looking at the power spectra... the large-timescale stuff becomes less dominant when scans are longer, but the noisy spectra are still clearly noise-only.  How odd.<br /><br />Dropped to 112 good bolos from 134.  That is much more believable.  Have to go back and fix Dec09 data too...<br /><br />Even after fixing the bad bolos, the model drops with iteration number.  Why why why?<br /><br />Well, looking at deconv_map, I've always returned the truly deconvolved version, not the reconvolved... maybe the reconvolved really is better?  Again, this will have to be extensively tested, but it certainly gets rid of the obvious/dominant error that the model kept dropping off.  However, FINALLY, based on how ridiculously good the reconv-deconvolved map looks, I think I'm ready to do the extensive pipeline tests.  So, 10dec_caltest has been started up with all of the new bolo_params applied and the changes in place to deconv_map... let's see what happens.<br /><img src="http://dl.dropbox.com/u/11308804/compare_noadd_nodeconv.png" width=800 title="Comparison of deconvolved and not-deconvolved maps (with reconv)"><br /><br />After that runs, I'll have to re-run the fit_and_plot routines</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making maps faster]]></title>
    <link href="http://keflavich.github.com/blog/2011/02/06/making-maps-faster/"/>
    <updated>2011-02-06T21:38:00-07:00</updated>
    <id>http://keflavich.github.com/blog/2011/02/06/making-maps-faster</id>
    <content type="html"><![CDATA[<div class='post'>
The fundamental problem at this point is making the pipeline run faster.  At current speeds, with undownsampled data, it may take ~days to process a single map.  Ideas for faster processing:<br /><br /><ol><li> Find out how long it takes to converge to 1%, 5%....  If it only requires 10 iterations, that's a factor of 2 savings over current strategies.<br /><li> Use downsampled data of some sort if possible.  Does DS2 match DS1?  How do we measure it?  Flux-flux comparison and PSF point-source size measurements are the most important.  Need to automate PSF comparison....<br /><li> Can we use median-combined individual images as a 0th order model?  I bet the answer is 'yes' and will probably increase the speed of convergence by a large amount.  Tests to run?  This is probably needed if we are to split up the 'super-fields' into smaller sub-fields, otherwise overlapping data will be used less effectively.<br /><li> Find some way to keep bgps.raw, bgps.ra, bgps.dec, and other items that are only used once on the HD during the iterative process.  Is there any way to separate out data in a struct in this manner?<br /></ol></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delining - Maps]]></title>
    <link href="http://keflavich.github.com/blog/2011/02/03/delining-maps/"/>
    <updated>2011-02-03T15:16:00-07:00</updated>
    <id>http://keflavich.github.com/blog/2011/02/03/delining-maps</id>
    <content type="html"><![CDATA[<div class='post'>
First comment - delining has <b>no effect</b> on downsampled data.  At least for the 0709 epoch, there were NO lines AT ALL in the data.  From 0-5 Hz, it was just empty.  So we don't have to worry about that... the problem only affects fully-sampled data.<br /><br />Then, onto map comparisons.  Curiously, the noise levels don't drop after delining.  They actually go up a bit.  This may be because of the effects on PCA cleaning.<br /><br />However, flux levels in the sources go up by 0-10%.  As usual, the change in flux changes from field to field without any obvious reason.<br /><br />Example 1: A pointing field.  The source is ~2% brighter in the delined version, but otherwise the match between the two is nearly perfect.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_lsgW26mWZnU/TUskr5xAMSI/AAAAAAAAF_M/J65CutNg9hM/s1600/101208_ob8_compare.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="320" width="320" src="http://1.bp.blogspot.com/_lsgW26mWZnU/TUskr5xAMSI/AAAAAAAAF_M/J65CutNg9hM/s320/101208_ob8_compare.png" /></a><br /><br /><a href="http://1.bp.blogspot.com/_lsgW26mWZnU/TUsksatOJSI/AAAAAAAAF_U/9X-rM6JQmCU/s1600/101208_ob8_psd.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="320" width="320" src="http://1.bp.blogspot.com/_lsgW26mWZnU/TUsksatOJSI/AAAAAAAAF_U/9X-rM6JQmCU/s320/101208_ob8_psd.png" /></a></div><br />Example 2: A bigger map, where the flux recovery is much greater when delining, but the background levels are also higher.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_lsgW26mWZnU/TUsoBrKcQyI/AAAAAAAAF_c/junIzma1zg4/s1600/101208_o11_compare.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="320" width="320" src="http://4.bp.blogspot.com/_lsgW26mWZnU/TUsoBrKcQyI/AAAAAAAAF_c/junIzma1zg4/s320/101208_o11_compare.png" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_lsgW26mWZnU/TUsoCFL1DiI/AAAAAAAAF_k/b1QrgajdlaE/s1600/101208_o11_psd.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="320" width="320" src="http://3.bp.blogspot.com/_lsgW26mWZnU/TUsoCFL1DiI/AAAAAAAAF_k/b1QrgajdlaE/s320/101208_o11_psd.png" /></a></div></div>

]]></content>
  </entry>
  
</feed>
